#!/usr/bin/env python
PACKAGE = "riptide_mapping"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Objects
Objects = gen.add_group("Objects")
Gate = Objects.add_group("Gate")
Cutie = Objects.add_group("Cutie")
Tommy = Objects.add_group("Tommy")
GMan = Objects.add_group("GMan")
Bootlegger = Objects.add_group("Bootlegger")
Badge = Objects.add_group("Badge")

# Filter Variables
Filter = gen.add_group("Filter")

# Gate Pose
Gate.add("gate_x_pos", double_t, 1, "X Position", 10)
Gate.add("gate_y_pos", double_t, 1, "Y Position", 0)
Gate.add("gate_z_pos", double_t, 1, "Z Position", -4)
Gate.add("gate_yaw", double_t, 1 , "Yaw", 0, 0, 359)
# Gate Covariance
Gate.add("gate_x_cov", double_t, 1, "X Covariance", 1.25 ,0.0, 100.0)
Gate.add("gate_y_cov", double_t, 1, "Y Covariance", 1.25 ,0.0, 100.0)
Gate.add("gate_z_cov", double_t, 1, "Z Covariance", 0.000001 ,0.0, 100.0)
Gate.add("gate_yaw_cov", double_t,1, "Yaw Covariance", 0.000001 ,0.0, 100.0)

# Cutie Pose
Cutie.add("cutie_x_pos", double_t, 1, "X Position", 2)
Cutie.add("cutie_y_pos", double_t, 1, "Y Position", 0)
Cutie.add("cutie_z_pos", double_t, 1, "Z Position", -1)
Cutie.add("cutie_yaw", double_t, 1 , "Yaw", 0, 0, 359)
# Cutie Covariance
Cutie.add("cutie_x_cov", double_t, 1, "X Covariance", 2 ,0.0, 100.0)
Cutie.add("cutie_y_cov", double_t, 1, "Y Covariance", 2 ,0.0, 100.0)
Cutie.add("cutie_z_cov", double_t, 1, "Z Covariance", 2 ,0.0, 100.0)
Cutie.add("cutie_yaw_cov", double_t,1, "Yaw Covariance", 2 ,0.0, 100.0)

# Tommy Pose
Tommy.add("tommy_x_pos", double_t, 1, "X Position", 2)
Tommy.add("tommy_y_pos", double_t, 1, "Y Position", 4)
Tommy.add("tommy_z_pos", double_t, 1, "Z Position", -1)
Tommy.add("tommy_yaw", double_t, 1 , "Yaw", 0, 0, 359)
# Tommy Covariance
Tommy.add("tommy_x_cov", double_t, 1, "X Covariance", 2 ,0.0, 100.0)
Tommy.add("tommy_y_cov", double_t, 1, "Y Covariance", 2 ,0.0, 100.0)
Tommy.add("tommy_z_cov", double_t, 1, "Z Covariance", 2 ,0.0, 100.0)
Tommy.add("tommy_yaw_cov", double_t,1, "Yaw Covariance", 1 ,0.0, 100.0)

# GMan Pose
GMan.add("gman_x_pos", double_t, 1, "X Position", 3.2)
GMan.add("gman_y_pos", double_t, 1, "Y Position", -1.09)
GMan.add("gman_z_pos", double_t, 1, "Z Position", -1)
GMan.add("gman_yaw", double_t, 1 , "Yaw", 0, 0, 359)
# GMan Covariance
GMan.add("gman_x_cov", double_t, 1, "X Covariance", 2 ,0.0, 100.0)
GMan.add("gman_y_cov", double_t, 1, "Y Covariance", 2 ,0.0, 100.0)
GMan.add("gman_z_cov", double_t, 1, "Z Covariance", 2 ,0.0, 100.0)
GMan.add("gman_yaw_cov", double_t,1, "Yaw Covariance", 1 ,0.0, 100.0)

# Bootlegger Pose
Bootlegger.add("bootlegger_x_pos", double_t, 1, "X Position", 3.2)
Bootlegger.add("bootlegger_y_pos", double_t, 1, "Y Position", 0.57)
Bootlegger.add("bootlegger_z_pos", double_t, 1, "Z Position", -0.5)
Bootlegger.add("bootlegger_yaw", double_t, 1 , "Yaw", 0, 0, 359)
# Bootlegger Covariance
Bootlegger.add("bootlegger_x_cov", double_t, 1, "X Covariance", 2 ,0.0, 100.0)
Bootlegger.add("bootlegger_y_cov", double_t, 1, "Y Covariance", 2 ,0.0, 100.0)
Bootlegger.add("bootlegger_z_cov", double_t, 1, "Z Covariance", 2 ,0.0, 100.0)
Bootlegger.add("bootlegger_yaw_cov", double_t,1, "Yaw Covariance", 1 ,0.0, 100.0)

# Badge Pose
Badge.add("badge_x_pos", double_t, 1, "X Position", 2)
Badge.add("badge_y_pos", double_t, 1, "Y Position", 2)
Badge.add("badge_z_pos", double_t, 1, "Z Position", -1)
Badge.add("badge_yaw", double_t, 1 , "Yaw", 0, 0, 359)
# Badge Covariance
Badge.add("badge_x_cov", double_t, 1, "X Covariance", 2 ,0.0, 100.0)
Badge.add("badge_y_cov", double_t, 1, "Y Covariance", 2 ,0.0, 100.0)
Badge.add("badge_z_cov", double_t, 1, "Z Covariance", 2 ,0.0, 100.0)
Badge.add("badge_yaw_cov", double_t,1, "Yaw Covariance", 1 ,0.0, 100.0)

# Filter Variables/Values
Filter.add("confidence_cutoff", double_t, 1, "Confidence Cutoff", .5,0.0,1.0)
Filter.add("stdev_cutoff", int_t, 1, "Standard Deviation Cutoff", 3, 1, 100)
Filter.add("angle_cutoff", double_t, 1, "Angle Cutoff", 15, 0, 359)
Filter.add("cov_limit", double_t, 1, "Covariance Limit", 0.01)
Filter.add("k_value", double_t, 1, "K Value", 0.01)
Filter.add("distance_limit", double_t, 1, "Distance Limit", 100,0,10000)

exit(gen.generate(PACKAGE, "riptide_mapping", "Mapping"))